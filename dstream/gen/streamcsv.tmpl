package dstream

import (
    "fmt"
	"time"
    "io"
    "os"
    "strconv"
    "math"
)

// Next advances to the next chunk.
func (cs *CSVReader) Next() bool {

	if cs.done {
		return false
	}

	if cs.limitchunk > 0 && cs.limitchunk <= cs.chunknum {
		cs.done = true
		return false
	}

	cs.chunknum++

	truncate(cs.bdata)

	for j := 0; j < cs.chunkSize; j++ {

		// Try to read a row, return false if done.
		var rec []string
		var err error
		if cs.firstrow != nil {
			rec = cs.firstrow
			cs.firstrow = nil
		} else {
			rec, err = cs.csvrdr.Read()
			if err == io.EOF {
				cs.done = true
				return ilen(cs.bdata[0]) > 0
			} else if err != nil {
				if cs.skipErrors {
					os.Stderr.WriteString(fmt.Sprintf("%v\n", err))
					continue
				}
				panic(err)
			}
		}
		cs.nobs++

		for pos, typ := range cs.types {
			fpos := cs.filepos[pos]
			switch typ.Type {
			    {{- range . }}
				    case {{ .Utype }}:
					    {{- if eq .ConvGroup "i" }}
						    x, err := strconv.Atoi(rec[fpos])
						    if err != nil {
							    panic(err)
						    }
						{{- else if eq .ConvGroup "f" }}
						    x, err := strconv.ParseFloat(rec[fpos], 64)
						    if err != nil {
							    x = math.NaN()
						    }
						{{- else if eq .ConvGroup "s" }}
						    x := rec[fpos]
						{{- else }}
						    x := cs.parseTime(rec[fpos])
						{{- end }}
						u := cs.bdata[pos].([]{{ .Type }})
						cs.bdata[pos] = append(u, {{ .Type }}(x))
				{{- end }}
				default:
					panic("unknown type")
			}
		}
    }

	return true
}

func (cs *CSVReader) setbdata() {

	cs.bdata = make([]interface{}, len(cs.names))

	for pos, dtype := range cs.dtypes {
		switch dtype {
            {{- range . }}
                case {{ .Utype }}:
     		        cs.bdata[pos] = make([]{{ .Type }}, 0)
		    {{- end }}
		    default:
		        panic("Unknown type")
		}
	}
}

