package dstream

import (
	"compress/gzip"
	"encoding/gob"
	"os"
	"time"
)

// Save saves the DataFrame to a file.
func (df *DataFrame) Save(fname string) {

    fid, err := os.Create(fname)
    if err != nil {
    	panic(err)
    }
    defer fid.Close()

    gid := gzip.NewWriter(fid)
    defer gid.Close()

	enc := gob.NewEncoder(gid)

	nchunk := uint64(len(df.data[0]))
	err = enc.Encode(&nchunk)
	if err != nil {
		panic(err)
	}

	err = enc.Encode(df.names)
	if err != nil {
		panic(err)
	}

	var dtypes []Dtype
	for j := range df.data {
		switch df.data[j][0].(type) {
			{{- range . }}
				case []{{ .Type }}:
				    dtypes = append(dtypes, {{ .Utype }})
			{{- end }}
			default:
			    panic("unknown dtype")
		}
	}

	err = enc.Encode(dtypes)
	if err != nil {
		panic(err)
	}

    for j := range df.data {
    	for i := range df.data[j] {
			switch x := df.data[j][i].(type) {
    			{{- range . }}
					case []{{ .Type }}:
						err := enc.Encode(&x)
						if err != nil {
							panic(err)
						}
	    		{{- end }}
	    	}
    	}
    }
}

// Load loads the DataFrame from a file.
func (df *DataFrame) Load(fname string) {

    fid, err := os.Open(fname)
    if err != nil {
    	panic(err)
    }
    defer fid.Close()

    gid, err := gzip.NewReader(fid)
    if err != nil {
    	panic(err)
    }
    defer gid.Close()

	enc := gob.NewDecoder(gid)

	var nc uint64
	err = enc.Decode(&nc)
	if err != nil {
		panic(err)
	}
	nchunk := int(nc)

	var names []string
	err = enc.Decode(&names)
	if err != nil {
		panic(err)
	}
	nvar := len(names)

	var dtypes []Dtype
	err = enc.Decode(&dtypes)
	if err != nil {
		panic(err)
	}

	data := make([][]interface{}, nvar)
	for j := 0; j<nvar; j++ {
		data[j] = make([]interface{}, nchunk)
	}

    for j := 0; j<nvar; j++ {
        for i := 0; i<nchunk; i++ {
			switch dtypes[j] {
    			{{- range . }}
					case {{ .Utype }}:
					    var x []{{ .Type }}
						err := enc.Decode(&x)
						if err != nil {
							panic(err)
						}
						data[j][i] = x
	    		{{- end }}
	    	}
    	}
    }

	df.names = names
    df.data = data
}