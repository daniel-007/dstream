package dstream

import (
	"time"
    "fmt"
)

func (fc *filterCol) Next() bool {

	if !fc.source.Next() {
		fc.nobsKnown = true
		return false
	}

	n := ilen(fc.source.GetPos(0))
	if n == 0 {
		return true
	}

	fc.keep = resizeBool(fc.keep, n)
	for i := range fc.keep {
		fc.keep[i] = true
	}

	vm := VarMap(fc.source)
	fc.filter(vm, fc.keep)

	fc.keeppos = fc.keeppos[0:0]
	for j := range fc.keep {
		if fc.keep[j] {
			fc.keeppos = append(fc.keeppos, j)
		}
	}
	fc.nobs += len(fc.keeppos)

	q := len(fc.keeppos)
	for k, na := range fc.source.Names() {
	    v := fc.source.Get(na)
		switch x := v.(type) {
	    	{{- range . }}
				case []{{ .Type }}:
					var u []{{ .Type }}
					if fc.bdata[k] != nil {
						u = fc.bdata[k].([]{{ .Type}})
					}
					u = resize{{ .Utype }}(u, q)
					u = u[0:q]
					for i, j := range fc.keeppos {
						u[i] = x[j]
					}
					fc.bdata[k] = u
		    {{- end }}
		    default:
				msg := fmt.Sprintf("Unkown data type '%T'\n", v)
		        panic(msg)
	    }
    }

	return true
}
